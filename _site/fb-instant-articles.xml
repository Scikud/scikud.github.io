<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title></title>
    <link>http://localhost:4000</link>
    <description>
      .
    </description>
    
        
            <item>
                <title>I may need to rethink things...</title>
                <link>http://localhost:4000/openai/2020/12/20/troubles/</link>
                <content:encoded>
                    <![CDATA[
                    <p>One of the particularly fascinating things i’ve encountered during NEURIPS 2020 was a workshop on deep implicit layers that raises some questions about the nature of my current project proposal for the OpenAI scholars program. While I highly recommend checking out the <a href="http://implicit-layers-tutorial.org/">tutorial</a> and working through the main ideas for yourself, I’ll try to super briefly outline the principle argument and method. All figures in this post are <a href="https://arxiv.org/pdf/1909.01377.pdf">stolen from their work</a>.</p>

<p>Deep equilibrium models are built on top 3 ideas.</p>
<ol>
  <li>Implicit layers are more expressive than explicit layers. That is, instead of having layers that express how to calculate a model’s output from its input we can instead specify which conditions we would like for a model’s output and input to satisfy. This has a number of attractive properties (all worthy of an entire blog post) but prime among them is the nice property of decoupling a model’s solution from the procedure that generates it.</li>
  <li>Feedforward models can be represented by an equivalent weight-tied recurrent back-propagation model which they call a deep equilibrium model.</li>
</ol>

<p style="text-align: center;"><img src="/images/iterativeModel.png" alt="iterativeModel" /></p>
<ol>
  <li>Deep equilibrium models can be constructed such that they converge to a fixed point. What’s particularly dope is that this property combined with the decoupling property talked about above ultimately lets you plug in your models dynamics into any black box optimizer.</li>
</ol>

<p>The upshot, is that the <a href="https://en.wikipedia.org/wiki/Implicit_function_theorem">implicit function theorem</a> gives a really nice way of computing gradients near fixed points without having to store the usual intermediaries you would if you were computing and storing the computational graph using standard auto-differentiation. This allows for some fairly massive reductions in the memory requirements for equivalently sized models.  What’s interesting is to measure the performance of DEQ models when compared to more traditional single pass feed forward models.</p>

<p style="text-align: center;"><img src="/images/deqPerformance.png" alt="iterativeModel" /></p>

<p>In some sense these deep equilibrium models can be thought of as deep networks with infinite depth since they’re iteratively evaluated until their output reaches convergence up to some tolerance threshold. The troubling question this raises for the research and my project proposal research is whether a DEQ represents the limits of what’s possible vis-à-vis iterative refinement. To rephrase, if the principal idea in my work is that it may be possible to continually and iteratively improve performance of smaller models by more optimally leveraging test time compute, then the fixed point of DEQ models may represent the upper bound of iterative application.</p>

<p>To be sure, even if DEQs do represent some performance limit for fixed parameter models there still exist fascinating questions to be asked here nonetheless. Why are the performances gains so marginal? How does the performance of DEQ models change with task algorithmic complexity? <em>etc, etc…</em></p>

<p>To be honest, I’m still not sure how to grapple with any of these issues, or whether these are signs that perhaps I should consider alternative proposals. For now, my two pronged approach is as follows</p>

<ol>
  <li>
    <p><strong>Fail Fast Tests:</strong> Make these questions more concrete by examining the performance of recursive transformers and external memory models on tasks we believe test time compute will actually make a difference.  Thus far i’ve constructed  a set of simple algorithmic tasks (i’ll soon make these available on github). The motivation here is to quickly gauge for signs of life in this work.</p>
  </li>
  <li>
    <p><strong>Explore EBM backup plan</strong> As far as I can tell, test time compute paradigm actually seems to be more at home in the energy based model framework where the idea is that you characterize an energy function that parametrizes the correspondence between your input and output. At inference, you then search for an output that minimizes the energy function (using gradient descent if the latent space is continuous) using any standard optimization technique of choice. Consequently, as a backup I’m also reviewing the EBM literature to build familiarity with this space.</p>
  </li>
</ol>

<p>Anywho that’s enough rambling for now. Catch you on the flip.</p>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/openai/2020/12/20/troubles/</guid>
                <description>
                    
                    ruh roh
                    
                </description>
                <pubDate>Sun, 20 Dec 2020 04:56:29 -0800</pubDate>
                <author>Kudzo Ahegbebu</author>
            </item>
        
    
        
            <item>
                <title>No, less isn't more, more is more?</title>
                <link>http://localhost:4000/openai/2020/12/04/compute/</link>
                <content:encoded>
                    <![CDATA[
                    <p>Over the past two weeks, I’ve been thinking more about which research direction I’d like to pursue for the remainder of the scholar’s program. In this post ,I’d like to just outline just the motivating question without much exposition about my approach. I don’t want to spend too much time talking about my research direction just yet largely because I’m still searching for mechanisms to think more clearly about these issues.</p>

<p><strong>Broad context</strong>. One thing in particular that’s struck me (as an effect of being witness to some of the work being undertaken at OpenAI) is a massive asymmetry in compute budgets. State of the art models are typically trained on massive multi-GPU clusters and then subsequently deployed on machines with significantly smaller computational capacity. While this may be desirable for edge or on-device computing, an interesting question to ask is whether or not this represents an inefficient underutilization of the computational resources.</p>

<p><em>If we’re being clever can create constructions such that smaller adaptive models can instead leverage test time compute to overcome the handicap of having a smaller number of learnable parameters?</em></p>

<p>Broadly, I actually don’t think that simply scaling learning models will lead to the most qualitative gains in the expressiveness and generality of machine intelligence. However, in accordance to the <a href="http://www.incompleteideas.net/IncIdeas/BitterLesson.html">bitter lesson</a> thinking about mechanisms that allow all the computation available to us to be more optimally be allocated is certainly a deeply useful endeavor.</p>

<p>Generally, I believe there’s a great deal of utility in thinking more explicitly about compute budgets as a fundamental part of the broader optimization problem we attempt to solve when constructing machine learning models. Explicitly, given a fixed computational budget how do we optimize that budget between our training and test time regimes?  This question takes increasing precedence when you operate at the scale of OpenAI.  In some sense active learning is one perspective to approach this question (e.g which subsets of the internet should you train your GPT-X model, keeping in mind that determining those subsets also comes from your compute budget).  More speculatively, other approaches seem to indirectly relate to this question of  iterative improvement/test time compute as well, particularly Hebbian learning approaches, or latent variable energy models.</p>

<p>Anywho, that’s all for now. Catch you on the flip.</p>

<p>–</p>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/openai/2020/12/04/compute/</guid>
                <description>
                    
                    Compute maximalism
                    
                </description>
                <pubDate>Fri, 04 Dec 2020 04:56:29 -0800</pubDate>
                <author>Kudzo Ahegbebu</author>
            </item>
        
    
        
            <item>
                <title>Reframe/Reparametrize</title>
                <link>http://localhost:4000/openai/2020/11/22/reframe-reparametrize/</link>
                <content:encoded>
                    <![CDATA[
                    <p>In continuation of the tradition of this blog, where I start off writing a post about one topic and ultimately end up deleting it a quarter of the way through and begin writing about something totally different, I present to you this week’s topic: reframing and reparametrization using Lagrange multipliers.</p>

<p>One tool i’ve found particularly useful throughout the years is taking problems I have in one domain and trying to reframe them as an optimization problem in order to use the method of Lagrange multipliers to arrive at a solution. The utility of <a href="https://en.wikipedia.org/wiki/Lagrange_multiplier">Lagrange multipliers</a> (and more broadly <a href="https://en.wikipedia.org/wiki/Karush%E2%80%93Kuhn%E2%80%93Tucker_conditions">the KKT conditions</a> ) is that as long as you can frame what you care about as some sort of constrained optimization problem, the method of lagrange multipliers gives you a simple but powerful method to derive algorithms as well as understand and bound your problem’s sensitivites. I’ve always found this to be really cool, because at it’s core you simply specify something you’d like to optimize (even if it’s non-convex), specify contraints that thing should ideally satisfy and like magic, out pops an algorithm or a function corresponding to the optimum (or if not you usually at least get computable conditions that optimum should satisfy).</p>

<p>I’ll walk through 3 examples of this type of constrained optimization that have popped up for me over the past month in the context of machine learning. Namely, using the Lagrange formalism as one perspective on how to  arrive at the origins of the Gaussian distribution, the Backprop algorithm, and the Trust Region Policy Optimization (TRPO) algorithm in reinforcement learning (in some ways the predecessor of the more widely used PPO algorithm).</p>

<h2 id="origins-of-the-gaussian-maximum-entropy-distributions">Origins of the Gaussian (Maximum Entropy Distributions)</h2>
<p>A natural question to ask is: What’s the most general distribution one can use to describe random variables with finite mean and finite variance?</p>

<p>The entire point of statistics is to infer both the shape and the parameters that control the underlying distributions generating our samples. What’s the best we can do? Considering the space of all possible distributions we could potentially choose from we’d like to find a distribution that satisfies these constraints as weakly as possible. Having as little pre-existing structure as possible ensures it remains as general as possible, making the “least claim of being informed beyond the stated prior data”. What we’re really saying  is that we want a distribution that maximizes entropy<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote">1</a></sup>.</p>

<p>\(\text{maximize}[H(x)] = \text{maximize}[\int_{-\infty}^{\infty}p(x)\log(P(x)dx ]\).</p>

<p>To reiterate the distribution must also satisfy the finite mean and finite variance constraints, explicitly:</p>

<ul>
  <li><strong>Constraint 0</strong> :Probability density function must sum to 1:  \(\int_{-\infty}^{\infty}p(x)dx = 1\)</li>
  <li><strong>Constraint 1</strong> :Finite mean:  \(\int_{-\infty}^{\infty}p(x)xdx = \mu\)</li>
  <li><strong>Constraint 2</strong> :Finite variance: \(\int_{-\infty}^{\infty}p(x)\left(x-\mu\right)^2dx = \sigma\)</li>
</ul>

<p>Putting in all together using the method of Lagrange multipliers we have:</p>

\[\begin{align}
\mathcal{L}= 
\int_{-\infty}^{\infty}p(x)\log p(x)dx 
-\lambda_0\left(\int_{-\infty}^{\infty}(p(x)-1\right)dx 
-\lambda_1\left(\int_{-\infty}^{\infty}p(x)(x)dx-\mu\right) \\
-\lambda_2\left(\int_{-\infty}^{\infty}p(x)(x-\mu)^2dx-\sigma\right) 
\end{align}\]

<p>Since \(\mathcal{L} = \mathcal{L}(P(x), \lambda)\), taking the gradients we have :</p>

\[\begin{align}
\frac{\partial \mathcal{L}}{\partial p(x)} =  \log p(x) +1 - \lambda_0 - \lambda_1x -\lambda_2(x-\mu)^2 = 0 \\
\frac{\partial \mathcal{L}}{\partial \lambda_0}  = \int_{-\infty}^{\infty}p(x)dx-1 = 0\\\
\frac{\partial \mathcal{L}}{\partial \lambda_1} = \int_{-\infty}^{\infty}p(x)xdx-\mu = 0 \\
\frac{\partial \mathcal{L}}{\partial \lambda_2}  = \int_{-\infty}^{\infty}p(x)\left(x-\mu\right)^2dx-\sigma = 0 \\
\end{align}\]

<p>I won’t put the algebra here (it’s not at all interesting and you probably shouldn’t much care) but you start with</p>

\[\log p(x) = \lambda_0 + \lambda_1 x + \lambda_2(x-\mu)^2 -1\]

<p>keep cranking and you’ll eventually end up with the following:</p>

\[P(x) = \frac{1}{\sqrt{2\pi \sigma^2}} exp\left(-\frac{(x-mu)^2}{2 \sigma^2}\right)\]

<p>The Gaussian distribution at last. To recap, by framing our original question as a constrained optimization problem we were able to retrieve the gaussian distribution in a natural sort of way.</p>

<h2 id="origins-of-backprop">Origins of Backprop</h2>
<p>It turns out we can reframe back-propagation in a <a href="http://yann.lecun.com/exdb/publis/pdf/lecun-88.pdf">similar fashion</a>. Ultimately, supervised learning is about minimizing the error between some labeled data \(Y\) and our model’s predictions, usually given by the last layer of our neural network \(Z^L\).</p>

<p>Compactly: minimize \(Loss(z^L, y)\), where \(z^{i} = f^i(z^{i-1},W^i)\)</p>

<p>At it’s core, it’s just another instance of a constrained optimization problem that can be tackled with the same Lagrangian formalism as before.</p>

\[\mathcal{L}(z, W, \lambda)=  Loss(z^L, y) -\sum\limits_{i=1}^L \lambda_{i}^T\left(z^i - f^i(z^{i-1})\right)\]

<p>Above, we express the dynamics of each layer of the network as a sum through all \(L\) layers. Effectively, all we’re saying is –minimize some loss function  <em>S’il vous plaît</em> –with the constraint that each layer \(Z^i\) of our network is just a function of the previous layer \(Z^{i-1}\) through some non-linear function \(f\).</p>

<p>Taking the gradient we arrive at the following:</p>

\[\begin{align}
\nabla_\boldsymbol{\lambda_i} \mathcal{L} = z^i - f^i(z^{i-1},W^i) = 0 \\
\nabla_\boldsymbol{w} \mathcal{L} = -\sum\limits_{i=1}^L \lambda_i^T \nabla_W f^i(z^{i-1},W^i) = 0 \\ 
\nabla_\boldsymbol{z^i} \mathcal{L} = \lambda_i - \nabla f^{i+1}(z^i,w^{i+1}) = 0 \\
\nabla_\boldsymbol{z^L} \mathcal{L} = \lambda_L - \nabla Loss(z^L, y) = 0 \\
\end{align}\]

<p>Taking a looking at above, one gets almost for free the following: 
\(z^i =f^i(z^{i-1}\) and \(\lambda_L = \nabla_{z^L} Loss(z^L,y)\)</p>

<p>Additionally, Working through these (particularly the third equation)  one eventually arrives at</p>

\[\lambda_j = \sum_{i \in \beta(j)} \lambda_i \frac{\partial f_i (z^i, W^i)}{\partial z^j}\]

<p>where \(\beta(j)\) is the set of all incoming edges from the vertex j<sup id="fnref:2" role="doc-noteref"><a href="#fn:2" class="footnote">2</a></sup></p>

<p>Which is recognizable in the context of backprop as the equation for the the adjoints \(\lambda_ i\), telling us how to measure the sensitivity of one node relative to the previous layer.  Cool.</p>
<h2 id="origins-of-trpo">Origins of TRPO</h2>
<p>Man, bad news homie – this post is already much longer than I originally intended (and I’m getting <em>real</em> tired to typing out LaTex), so maybe I won’t go into as much detail about this one. Anyway, It turns out one can arrive at the core of <a href="https://arxiv.org/pdf/1502.05477.pdf">TRPO</a> algorithm in reinforcement learning under a similar scheme. I’ll try to lay out the crux briefly:</p>

<p><a href="https://lilianweng.github.io/lil-log/2018/02/19/a-long-peek-into-reinforcement-learning.html">Reinforcement learning</a> fundamentally differs from supervised learning in some important ways. Particularly, in the supervised learning case your samples are drawn i.i.d from some underlying distribution and therefore it ultimately doesn’t really matter if you sample from a “bad” (low reward) region of your parameter space in one batch, because your next batch will not be conditioned on the poor performing batch in any way. The issue in reinforcement learning<sup id="fnref:3" role="doc-noteref"><a href="#fn:3" class="footnote">3</a></sup> is that this sampling i.i.d assumption no longer holds, precisely because your policy ultimately also <em>controls</em> your sampling process; your policy both learns from your samples and is responsible for gathering new samples.</p>

<p>Ultimately we’d only like to trust our policy within some small region. Ostensibly, a natural way to do this is to bound our parameter updates such that they stay within some small radius of their original values.</p>

\[\theta' \leftarrow  \arg\max_{\theta} (\theta' - \theta)^T \nabla J(\theta)\]

\[s.t \quad ||\theta' - \theta || ^2 \leq \epsilon\]

<p>In reality, however we don’t have much reason to expect this to be meaningful since some parameters might change much more quickly or slowly than others. Ultimately what we care about isn’t <em>really</em> that the parameters that control out policy be bounded from one update to the next, it’s that change in the policy <em>itself</em> be bounded.</p>

<p>We’d like to find a way to restrict our policy updates that isn’t explicitly dependent on whatever parametrization we used. One way to do this is instead of restricting the gradients, we  should restrict the <a href="https://en.wikipedia.org/wiki/Kullback%E2%80%93Leibler_divergence">KL Divergence</a> between the policy and it’s update to be bound by some epsilon ball. Sure sounds like a constrained optimization problem don’t it? 😉</p>

<hr />
<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p>https://en.wikipedia.org/wiki/Maximum_entropy_probability_distribution <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:2" role="doc-endnote">
      <p>Worked out in more detail <a href="https://timvieira.github.io/blog/post/2017/08/18/backprop-is-not-just-the-chain-rule/">here</a> for the interested <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:3" role="doc-endnote">
      <p>At least in the on-policy case <a href="#fnref:3" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/openai/2020/11/22/reframe-reparametrize/</guid>
                <description>
                    
                    Another post courtesy of ya boy Lagrange
                    
                </description>
                <pubDate>Sun, 22 Nov 2020 04:56:29 -0800</pubDate>
                <author>Kudzo Ahegbebu</author>
            </item>
        
    
        
            <item>
                <title>Chasing the White Rabbit</title>
                <link>http://localhost:4000/openai/2020/11/05/ay-dios-mio/</link>
                <content:encoded>
                    <![CDATA[
                    <p>Election week 2020 has been one of the longest 56 years of my life. Trying to get anything substantial accomplished in this context has been a humbling reminder of the limits of my will.</p>

<p>The backdrop of chaos and existential dread not withstanding, in the past two weeks I’ve begun wrestling more seriously with many of the same questions I imagine all early stage researchers find themselves struggling with.</p>

<p><em>How do I efficiently allocate my time? What are the right problems? What subset of those are amenable to tractable progress?</em></p>

<p>Of course, responses to the core of how to address these questions have been crafted by a multitude of perspectives from many talented writers and research scientists<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote">1</a></sup>. <em>Intellectually</em> I think I hear what they’re saying, however, I’m still not quite sure I yet <em>grok</em> what they mean.</p>

<h3 id="rabbit-holes">Rabbit Holes</h3>
<p>For my cohort these questions take increasing saliency as our project selection phase approaches. 
In the midst of this, one of the particularly frustrating tactical aspects of the past two weeks has been being stuck in rabbit holes. Frustrating, because attempting to align some foundational concept with your intuition  seems both educationally productive yet in absolute terms unduly time consuming. It’s difficult to decipher what the correct middle ground should be. After-all, wrestling deeply with problems and learning to get yourself unstuck is a critical skill. I’ve talked to a couple people about this and through these discussions two major themes recur.</p>

<ol>
<li> <em>Use the resources of those around you:</em> One thing I've come to quickly realize is how ineffectively I'm leveraging the incredible talent and resources in my proximity. I need to become better at asking more questions to more people more frequently. There is something to be gained by learning to trod through problems independently, however it makes no sense to not take full advantage of the mentorship and knowledge base that's so readily accessible</li>

<li> <em>Keeping context in mind, learn to work with imperfect information</em> . The tendency to dive into rabbit holes is one I think is born from a desire to have perfect domain information. While obviously such an impulse can be helpful and even motivating, one of perhaps even more utility is the ability to contextualize and bound your uncertainty around particular concepts in order to ensure you don't allow relatively minor detail to occlude your view of the bigger picture. 
 </li>

</ol>

<h2 id="what-ive-been-thinking-about">What I’ve been thinking about</h2>
<p>Originally I actually planned to write this blog post as an attempt to breathe coherence into my thoughts on some linked concepts relating different research directions i’ve been thinking about. Briefly, i’ve been thinking about meta learning and operations that bake in inductive bias and various cognitive priors onto the latent space of attention models. Particularly mechanisms that would allow us to have weak formal guarantees on the  outputs produced by these models.  However, I’m not quite sure my thoughts are yet as organized on that front as i’d like for them to be. I’d like to come back and write about that some other time.</p>

<p>By the way this entire post was written by GPT3. Just playing. Catch you on the flip!</p>

<hr />
<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p>Hamming’s <a href="https://www.cs.virginia.edu/~robins/YouAndYourResearch.pdf">“You and Your research”</a> and  Schulman’s <a href="http://joschu.net/blog/opinionated-guide-ml-research.html">“Opinionated Guide to ML Research”</a> come to mind <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/openai/2020/11/05/ay-dios-mio/</guid>
                <description>
                    
                    Searching for lightbulbs
                    
                </description>
                <pubDate>Thu, 05 Nov 2020 04:56:29 -0800</pubDate>
                <author>Kudzo Ahegbebu</author>
            </item>
        
    
        
            <item>
                <title>OpenAIs Scholars Initial Thoughts</title>
                <link>http://localhost:4000/openai/pixylls/jeykll/2020/10/22/new-blog-who-dis/</link>
                <content:encoded>
                    <![CDATA[
                    <p>I’m starting a new blog<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote">1</a></sup>  to mark the beginning of my time as part of the OpenAI scholar’s program</p>

<h2 id="things-im-excited-about">Things I’m excited about</h2>
<p>I’m deeply excited and humbled to work with such an incredible and deeply talented pool of individuals, both within my cohort and within OpenAI in general. The first week has been such a whirlwind of excitement. I’ve spent much of it shoring up my foundations in machine learning theory and application as well tyring to find my bearings in the wide sea of research interests.</p>

<p>I joined this program because of my belief that well aligned machine intelligence can act as an incredible force multiplier for a wide range of human endeavors. I’m most excited by the incredible generality of deep learning; the remarkable ability to abstract and  apply the same set of algorithms to a wide range of seemingly disparate problems. This paradigm excites me because it  reimagines computers and computation as being more than numerical automata but as robust tools capable of ingesting and producing rich inputs and outputs allowing us to augment our own problem solving capacity and by extension amplify ingenuity and improve the human condition. Honestly, what could be more exciting or compelling as a research interest?</p>

<h2 id="ramblings">Ramblings</h2>
<p>One thing I’ve personally found useful is keep running track of ideas that emerge during the course of self study. I’ve found this idea tracking helpful in the meta-sense; in that, over time it helps me see emerging trends in my train of thought. I’m really not sure how useful these stream of consciousness type expositions will be for others, but nevertheless here are some of my thoughts from this week:</p>

<ol>
  <li>
    <p>Training a neural network produces a model that we can think of as some object whose weights and biases provide discrete estimates of the high dimensional manifold our training data lies on. Along this train of thought, can we  think of the hyperparameters of two different networks trained on the same data as two different samples of the same underlying ‘true’ manifold? What then is the relationship (if any) between the weights of these two models? Is it possible to be clever and somehow combine these two manifold samplings to get a better estimate of the true manifold ala something loosely analogous to <a href="https://francisbach.com/richardson-extrapolation/">Richardson Extrapolation</a> /Bayesian updating ?</p>
  </li>
  <li>
    <p>When training neural networks we typically include as part of the loss function, a regularization term. The idea behind this is that penalizing large model weights we can prevent the co-adaptation of network weights and limit the networks ability to learn local noise in the underlying training data thus leading to better generalization.  The regularization terms i’ve seen thus far are fairy straightforward l1 or l2 norms on the network weights. I’m curious to explore the effectiveness of regularizing with more sophisticated techniques. Like regularizing with the goal to minimize entropy or something along that vein.</p>
  </li>
</ol>

<p>That’s it for now. Catch you all later!</p>

<hr />
<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p>For the literally two people who read the single post in the old blog, I’ve migrated that post as well :) <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/openai/pixylls/jeykll/2020/10/22/new-blog-who-dis/</guid>
                <description>
                    
                    New blog who dis?
                    
                </description>
                <pubDate>Thu, 22 Oct 2020 05:56:29 -0700</pubDate>
                <author>Kudzo Ahegbebu</author>
            </item>
        
    
        
            <item>
                <title>Non-inertial Reference Frames and Coin Wishing Wells (Part I)</title>
                <link>http://localhost:4000/openai/pixylls/jeykll/2019/11/18/coin-wishing-well/</link>
                <content:encoded>
                    <![CDATA[
                    <p>Sometime ago, a friend of mine and I were curious about the physical principles that cause coins to sprial so elegantly down the kinds of coin funnels one might find at the  local mall.
After searching online we were unable to find a description that was both mathematically satisfying and sufficiently captured the relevant physics. Having some free time, we decided to tackle this problem on our own</p>

<h3 id="lets-talk-lagrangians">Let’s talk Lagrangians</h3>

<p>Loosely speaking, in physics , whenever one is working on a trajectory problem that
involves non-cartesian coordinates it’s often easier to find the equations of motion
using the Lagrangian framework, which (as we’ll see for this problem) is far more convenient for solving
problems that aren’t so well suited for Newton’s formulation of classical mechanics.</p>

<p>In particular, the utility of  Lagrange’s framework is that it allows for us to work
in the so called <em>generalized coordinates</em>. The principle being that if we’re being clever,
these generalized coordinates can (and indeed should) be chosen to exploit geometry or symmetries
present in the system we wish to analyze.</p>

<p style="text-align: center;"><img src="/OldBlog/Wishing_Well.jpeg" alt="wishingWell" width="400px" />.</p>

<p>Looking at this image of a coin well cross section, we can imagine that it might be
useful to describe the motion of a coin about the funnel in terms of it’s radius \(\hat{r}\) from the center  of the funnel,
it’s azimuthal angle \(\hat{\theta}\), and it’s height \(\hat{z}\) within the well.</p>

<p>Above, the Lagrangian is a function of kinetic and potential energy. For the kinetic energy we have:</p>

\[T(x,y,z)= \frac{1}{2}m(\dot{x}^2+\dot{y}^2 +\dot{z}^2)  \leftrightarrow  T=\frac{1}{2}m(\dot{r}^2+r^2\dot{\theta}^2+\dot{z}^2)\]

<p>the second expression for kinetic energy \(T\) follows since we have 
\(x = rcos(\theta)\) and \(y= rsin(\theta)\).
Then, since the height \(z\) is a function of the radius \(r\) we have</p>

\[\dot{z}(r,\dot{r}) = \frac{c_1\dot{r}}{r^2} \leadsto T=\frac{1}{2}m(\dot{r}^2+r^2\dot{\theta}^2+\frac{c_1^2\dot{r}^2}{r^4})\]

<p>The potential energy for this system comes simply as a result of gravity. From kindergarten we have,</p>

\[U(z) = mgz \rightarrow  U(r) = mg(-\frac{c_1}{r}+c_2)\]

<p>Therefore, we may write the lagrangian function \(\mathcal{L}=T-U\) as</p>

\[\mathcal{L}=\frac{1}{2}m(\dot{r}^2+r^2\dot{\theta}^2+\frac{c_1^2\dot{r}^2}{r^4}) - g(\frac{c_1}{r}+c_2)\]

<p>At this point, before proceeding with Lagrange’s equation, it’s important to note that expression above doesn’t
account for non-conservative forces (like friction) that dissipate the total energy of the coin as it proceeds down the well.
It could be useful to model these viscous effects using the seemingly reasonable assumption that these frictional
forces scaled proportionally with radial and angular velocity It turns out afterward, that this is actually a damn fine first order approximation</p>

<p>As an educated guess one could assume that this dissapative force might look something like</p>

\[F = \frac{1}{2}(k_r\dot{r}^2+k_{\theta}\dot{\theta}^2)\]

<p>Where \(k_r\) and \(k_{\theta}\) are just some dissipative constants. This is the so called
<a href="https://en.wikipedia.org/wiki/Rayleigh_dissipation_function">Rayleigh dissipation function</a></p>

<p>For the radial component ,the Lagrange Equation (taking into account the dissipative friction effects we might expect the coin well to follow) may be written as</p>

\[\frac{\partial \mathcal{L}}{\partial r}-\frac{\partial \mathcal{L}}{\partial t}\frac{\partial \mathcal{L}}{\partial \dot{r}} = \frac{\partial F}{\partial \dot{r}}\]

<p>After substituting the lagrangian  function $\mathcal{L}$ into the expression above, and after some tedious algebra we finally arrive at our first equation of motion</p>

\[\boxed{\ddot{r}(\frac{r^4+c_1^2}{r^4})-\frac{2c_1^2\dot{r}^2}{r^5}+\frac{gc_1}{r^2}-r\dot{\theta}^2=\frac{k_r\dot{r}}{m}}\]

<p>Bitchin’!</p>

<p>Doing precisely the same thing for the \(\theta\) component, we arrive at the second equation of motion</p>

\[\boxed{-(r^2\ddot{\theta}+2r\dot{r}\dot{\theta})=k\dot{\theta}}\]

<p>If you’re unfamiliar with Lagrangian mechanics, allow me to take a moment to explain why this result is significant:
The complete equations of motion for this system were obtained <em>despite</em> the fact that we <em>only</em> specified the kinetic and potential energies of the coin without any
reference to Newtonian theory i.e we were able to do this without ever explicitly considering the <em>forces</em> acting on the coin.</p>

<h3 id="experiments-and-simulations">Experiments and Simulations</h3>
<p>I took the equations of motion above and plugged the differential equations above into MATLAB in order to simulate the coin’s trajectory.</p>

<p style="text-align: center;"><img src="/OldBlog/test_animate.gif" alt="simulation" /></p>

<p>Taking just a cursory qualitative look at the general form of the trajectory looks remarkably like the trajectories one sees in the actual coin wells.
In the next part of this article, we’ll take a look at how we can get more quantitative confidence that what we’ve derived corresponds to reality. Stay tuned!</p>

<hr />

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/openai/pixylls/jeykll/2019/11/18/coin-wishing-well/</guid>
                <description>
                    
                    Exploration from the old blog
                    
                </description>
                <pubDate>Mon, 18 Nov 2019 04:56:29 -0800</pubDate>
                <author>Kudzo Ahegbebu</author>
            </item>
        
    
  </channel>
</rss>
